;;;;;;;;;;;;;;;;;;
; core template
;;;;;;;;;;;;;;;;;;

{define template {cond}: 
 {for the conditions: [when {when_clause} then {then_clause},]* } as
 {(cond [({when_clause} {then_clause})]*)}}

{define template {set}:
 {set {x} as {y}} as
 {(set! {x} {y})}}

{define template {and}:
 {{x} and {y}} as
 {(and {x} {y})}}

{define template {or}:
 {{x} or {y}} as
 {(or {x} {y})}}

{define template {and...}:
 {{x} and... [{y}]*} as
 {(and {x} [{y}]*)}}

{define template {or...}:
 {{x} or... [{y}]*} as
 {(or {x} [{y}]*)}}

{define template {true}:
 {true} as
 {#t}}

{define template {false}:
 {false} as
 {#f}}

{define template {eq?}: 
 {{a} equals {b} ?} as
 {(eq? {a} {b})}}

{define template {null?}: 
 {{a} is null?} as
 {(null? {a})}}

{define template {pair?}: 
 {{a} is pair?} as
 {(pair? {a})}}

{define template {+}:
 {{x}+{y}} as
 {(+ {x} {y})}}

{define template {-}:
 {{x}-{y}} as
 {(- {x} {y})}}

{define template {minus}:
 {-{x}} as
 {(- 0 {x})}}

{define template {*}:
 {{x}*{y}} as
 {(* {x} {y})}}

{define template {/}:
 {{x}/{y}} as
 {(/ {x} {y})}}

{define template {=}:
 {{x}={y}} as
 {(= {x} {y})}}

{define template {>}:
 {{x}>{y}} as
 {(> {x} {y})}}

{define template {>=}:
 {{x}>={y}} as
 {(>= {x} {y})}}

{define template {<}:
 {{x}<{y}} as
 {(< {x} {y})}}

{define template {<=}:
 {{x}<={y}} as
 {(<= {x} {y})}}

{define template {car}:
 {first of {expr}} as
 {(car {expr})}}

{define template {cdr}:
 {rest of {expr}} as
 {(cdr {expr})}}

{define template {cons}:
 {construct list {a} {b}} as
 {(cons {a} {b})}}



